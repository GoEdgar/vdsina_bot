import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

from db_helpers import *
from api_manager import ApiManager
from exceptions import *

InlineKeyboard = types.inline_keyboard.InlineKeyboardMarkup
InlineButton = types.inline_keyboard.InlineKeyboardButton
RemoveKeyboard = types.ReplyKeyboardRemove
ReplyKeyboard = types.ReplyKeyboardMarkup
ReplyButton = types.KeyboardButton

TOKEN = '699496323:AAHpHRNraSsW_DdZh4jNV518WDGglZKLaJY'

storage = MemoryStorage()
bot = Bot(TOKEN, parse_mode='Markdown', )
dp = Dispatcher(bot, storage=storage)

api = ApiManager()


class AuthForm(StatesGroup):
    login = State()
    password = State()


def start_filter(msg):
    return msg.chat.type == 'private' and msg.text == '/start'


def menu_btn():
    btn = ReplyKeyboard(resize_keyboard=True)
    btn.insert('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    return btn


def remove_btn():
    return RemoveKeyboard()


def auth_btn():
    btn = ReplyKeyboard(resize_keyboard=True)
    btn.insert('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    return btn


@dp.message_handler(start_filter)
async def main(msg: types.Message):
    if is_new_user(msg.chat.id):
        await bot.send_message(msg.chat.id, f'–ü—Ä–∏–≤–µ—Ç, *{msg.chat.first_name}*!', reply_markup=menu_btn())
    else:
        await bot.send_message(msg.chat.id, f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu_btn())


def msg_profile(data):
    text = f"–ë–∞–ª–∞–Ω—Å: *{data['real']} —Ä.*\n" \
           f"–ë–æ–Ω—É—Å—ã: *{data['bonus']} —Ä.*\n" \
           f"–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: *{data['forecast']}*"
    btn = InlineKeyboard()
    btn.add(InlineButton('üñ• –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞', callback_data='servers'))
    return text, btn


@dp.message_handler(regexp='.*–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(msg: types.Message):
    try:
        data = await api.get_user_info(msg.chat.id)
    except InvalidCookie:
        await send_message_reauth(msg.chat.id)
    except CookieNotFound:
        await bot.send_message(msg.chat.id, '‚ÑπÔ∏è–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', reply_markup=auth_btn())
    else:
        text, btn = msg_profile(data)
        await bot.send_message(msg.chat.id, text, reply_markup=btn)

async def send_message_reauth(user_id, msg_id=None):
    text = '‚ùóÔ∏è*–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ'
    if msg_id:
        await bot.delete_message(user_id, msg_id)
    await bot.send_message(user_id, text, reply_markup=auth_btn())

@dp.message_handler(regexp='.*–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
async def profile(msg: types.Message):
    # —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –ª–æ–≥–∏–Ω
    await AuthForm.login.set()
    await bot.send_message(msg.chat.id, '‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω', reply_markup=remove_btn())


@dp.message_handler(state=AuthForm.login)
async def profile(msg: types.Message, state):
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω
    await state.update_data(login=msg.text)
    # —É–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–∞—Ä–æ–ª—å
    await AuthForm.next()
    await bot.send_message(msg.chat.id, '‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')


@dp.message_handler(state=AuthForm.password)
async def profile(msg: types.Message, state):
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º—É –ø–∞—Ä–æ–ª—å
    await state.update_data(password=msg.text)
    async with state.proxy() as data:
        # –¥–æ—Å—Ç–∞–µ–º –∏–∑ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        login, password = data['login'], data['password']
        # –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        data.state = None
        try:
            await api.auth_user(msg.chat.id, login, password)
        except InvalidAuthData:
            await bot.send_message(msg.chat.id, '‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=menu_btn())
        else:
            await bot.send_message(msg.chat.id, '‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', reply_markup=menu_btn())

async def msg_servers(user_id, *args):
    text = 'üñ• –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä'
    servers = await api.get_user_servers(user_id)
    btn = InlineKeyboard(row_width=1)
    for server in servers:
        btn.insert(InlineButton(server['service_name'], callback_data=server['service_id']))
    btn.insert(InlineButton('–ù–∞–∑–∞–¥', callback_data='back_to_profile'))
    return text, btn

async def msg_server_info(user_id, _, calldata):
    # –¥–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    
    s = await api.get_server_info(user_id, calldata)   # –≤ calldata –ª–µ–∂–∏—Ç id —Å–µ—Ä–≤–µ—Ä–∞
    text =  f"*{s['service_name']}*\n" \
            f"{'„Ä∞Ô∏è'* 10} \n"\
            f"‚ÑπÔ∏è IP-–∞–¥—Ä–µ—Å: `{s['ip']}`\n"\
            f"üñ• –°—Ç–∞—Ç—É—Å: *{s['service_status']}*\n"\
            f"üñ≤ Datacenter: *{s['dc']}*\n"\
            f"üåê –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü:\n"\
            f"    ‚ñ™Ô∏è—Ç–µ–∫—É—â–∏–π: *{s['traf_curr']}*\n"\
            f"    ‚ñ™Ô∏è–ø—Ä–æ—à–ª—ã–π: *{s['traf_last']}*\n"\
            f"üíø –û–°: *{s['oc']}*\n"\
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: *{s['service_created']}*\n"\
            f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: *{s['service_end']}*"
    btn = InlineKeyboard()
    btn.insert(InlineButton('–ù–∞–∑–∞–¥', callback_data='servers'))
    return text, btn

async def send_inline_with_auth(function, call):
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö inline-—Å–æ–æ–±—â–µ–Ω–∏–π
    user_id = call.message.chat.id
    msg_id = call.message.message_id
    try:
        text, btn = await function(user_id, msg_id, call.data)
    except InvalidCookie:
        # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
        await send_message_reauth(user_id, msg_id)
    else:
        await bot.edit_message_text(text, user_id, msg_id, reply_markup=btn)


@dp.callback_query_handler() # –æ–±—â–∏–π inline-—Ö–∞–Ω–¥–ª–µ—Ä
async def callback(call: types.CallbackQuery):
    # –Ω–∞ –∫–∞–∂–¥—ã–π callback.data —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    inline_functions = {'servers': msg_servers}
    
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫ —É—Å–ø–µ—Ö–æ–º
    await bot.answer_callback_query(call.id)
    if call.data in inline_functions:
        # –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ —É –ø—Ä–∏—à–µ–¥—à–µ–≥–æ callback.data –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è
        await send_inline_with_auth(inline_functions[call.data], call)
        
    elif call.data.isdigit():
        # –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ callback.data
        await send_inline_with_auth(msg_server_info, call)


        

executor.start_polling(dp, skip_updates=True)
